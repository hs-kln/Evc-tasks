# -*- coding: utf-8 -*-
"""Day4 task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fGTcun_FUSAliOfH4-f0PLvVGAvs_FhN

Create a UI for your ML models using Gradio and Streamlit, each in a separate project then upload your project in github

Gardio resources:

Vedio--> https://youtu.be/wruyZWre2sM?si=ZJWu_Cr9uxPBXLFR

Tutorial--> https://www.machinelearningnuggets.com/gradio-tutorial/

Streamlit resources:

Vedio--> https://youtu.be/Klqn--Mu2pE?si=JPAMk8v1x0AJsouJ

Tutorial--> https://www.datacamp.com/tutorial/streamlit
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import gradio as gr

# Load the data
df = pd.read_csv("/content/insurance.csv")

# Encoding
LE = LabelEncoder()
features = ['sex', 'smoker']
for f in features:
    df[f] = LE.fit_transform(df[f])
df = df.drop('region', axis=1)

# Split data into features and target
Y = df.charges
X = df.drop('charges', axis=1)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=44, shuffle=True)

# Apply Random Forest Regressor Model
RandomForestRegressorModel = RandomForestRegressor(n_estimators=100, max_depth=2, random_state=33)
RandomForestRegressorModel.fit(X_train, y_train)

# Gradio function to make predictions
def predict_charges(age, sex, bmi, children, smoker):
    input_data = pd.DataFrame({
        'age': [age],
        'sex': [0 if sex == "female" else 1],  # Encoding: 0 for female, 1 for male
        'bmi': [bmi],
        'children': [children],
        'smoker': [0 if smoker == "no" else 1],  # Encoding: 0 for no, 1 for yes
    })
    prediction = RandomForestRegressorModel.predict(input_data)[0]
    return prediction

# Gradio interface
iface = gr.Interface(
    fn=predict_charges,
    inputs=[
        gr.Slider(minimum=18, maximum=100, step=1, value=30, label="Age"),
        gr.Radio(choices=["female", "male"], label="Sex"),
        gr.Slider(minimum=10, maximum=60, step=0.1, value=25.0, label="BMI"),
        gr.Slider(minimum=0, maximum=10, step=1, value=1, label="Children"),
        gr.Radio(choices=["no", "yes"], label="Smoker"),
    ],
    outputs="number",
    title="Insurance Charges Prediction",
    description="Predict the insurance charges based on personal details."
)

iface.launch()

# pip install streamlit

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import streamlit as st

# Load the data
df = pd.read_csv("/content/insurance.csv")

# Encoding
LE = LabelEncoder()
features = ['sex', 'smoker']
for f in features:
    df[f] = LE.fit_transform(df[f])
df = df.drop('region', axis=1)

# Split data into features and target
Y = df.charges
X = df.drop('charges', axis=1)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=44, shuffle=True)

# Apply Random Forest Regressor Model
RandomForestRegressorModel = RandomForestRegressor(n_estimators=100, max_depth=2, random_state=33)
RandomForestRegressorModel.fit(X_train, y_train)

# Streamlit interface
st.title("Insurance Charges Prediction")

age = st.slider("Age", min_value=18, max_value=100, value=30)
sex = st.radio("Sex", options=["female", "male"])
bmi = st.slider("BMI", min_value=10.0, max_value=60.0, value=25.0, step=0.1)
children = st.slider("Children", min_value=0, max_value=10, value=1)
smoker = st.radio("Smoker", options=["no", "yes"])

# Prediction function
def predict_charges(age, sex, bmi, children, smoker):
    input_data = pd.DataFrame({
        'age': [age],
        'sex': [0 if sex == "female" else 1],  # Encoding: 0 for female, 1 for male
        'bmi': [bmi],
        'children': [children],
        'smoker': [0 if smoker == "no" else 1],  # Encoding: 0 for no, 1 for yes
    })
    prediction = RandomForestRegressorModel.predict(input_data)[0]
    return prediction

if st.button("Predict"):
    result = predict_charges(age, sex, bmi, children, smoker)
    st.success(f"The predicted insurance charge is: ${result:.2f}")

streamlit run app.py

