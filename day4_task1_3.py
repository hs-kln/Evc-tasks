# -*- coding: utf-8 -*-
"""Day4 task1.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yn9hv-8nrtnFvUZQrHa6BPJ4_-_QBweD
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the data
df = pd.read_csv('/content/Customer-Data - 2.csv')
df.head()

df['MINIMUM_PAYMENTS'] = df['MINIMUM_PAYMENTS'].fillna(df['MINIMUM_PAYMENTS'].mean())
df = df.dropna()
df.isna().sum()

df = df.drop('CUST_ID', axis =1)

# Standardize the features
scaler = StandardScaler()
scaled_df = scaler.fit_transform(df)

# Step 3: Apply K-means Clustering
# Determine the optimal number of clusters using the elbow method
sse = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_df)
    sse.append(kmeans.inertia_)

# Plot the elbow curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), sse, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('SSE')
plt.title('Elbow Method')
plt.show()

# Based on the elbow plot, choose an optimal number of clusters, say k=3
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(scaled_df)
labels = kmeans.labels_

# Step 4: Evaluate the Model
# Calculate the silhouette score
silhouette_avg = silhouette_score(scaled_df, labels)
print(f'Silhouette Score: {silhouette_avg}')

# Add the cluster labels to the original dataframe
df['Cluster'] = labels

# Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x=df.columns[0], y=df.columns[1], hue='Cluster', palette='viridis')
plt.title('Customer Data Clusters')
plt.show()

# Apply DBSCAN
# Define the model
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan.fit(scaled_df)

# Get the cluster labels
labels = dbscan.labels_

# Step 4: Evaluate the Model
# Calculate the silhouette score (ignoring noise points, labeled as -1)
if len(set(labels)) > 1:
    silhouette_avg = silhouette_score(scaled_df, labels)
    print(f'Silhouette Score: {silhouette_avg}')
else:
    print("Only one cluster found. Silhouette score cannot be calculated.")

# Add the cluster labels to the original dataframe
df['Cluster'] = labels

# Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x=df.columns[0], y=df.columns[1], hue='Cluster', palette='viridis')
plt.title('Customer Data Clusters (DBSCAN)')
plt.show()

