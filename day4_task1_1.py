# -*- coding: utf-8 -*-
"""Day4 task1.1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oG4AdpxFAyJSOyMDJPQ4AGy1ehb7hRNc

# Task1: ML application

Build more than two machine learning models for each dataset using Scikit-learn, covering Classification, Regression, and Clustering tasks. You need to create the entire pipeline, including dataset loading, preprocessing, model training, and evaluation.

1- Dataset(Classification): https://www.kaggle.com/datasets/shrutimechlearn/steel-plate-fault

2- Dataset(Regression): https://www.kaggle.com/datasets/mirichoi0218/insurance

3- Dataset(Clustering): https://www.kaggle.com/datasets/alirezachahardoli/customer-data-clustring/data

#Day4 task1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df1 = pd.read_csv("/content/faults.csv")
df1.head()

df1['target'].value_counts(1)

df1.target.unique()

# df.hist(figsize=(15,15))
# plt.show()

df1 = df.dropna()
df1.isna().sum()

from sklearn.preprocessing import LabelEncoder
# Encoding
LE = LabelEncoder()
df1['target'] = LE.fit_transform(df1['target'])

df1.loc[:10, ["target"]]

Y = df1.target
X = df1.drop('target', axis =1)

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=44, shuffle =True)

#Splitted Data
print('X_train shape is ' , X_train.shape)
print('X_test shape is ' , X_test.shape)
print('y_train shape is ' , y_train.shape)
print('y_test shape is ' , y_test.shape)

from sklearn.linear_model import LogisticRegression

LogisticRegressionModel = LogisticRegression(penalty='l2',solver='sag',C=1.0,random_state=33)
LogisticRegressionModel.fit(X_train, y_train)

#Calculating Details
print('LogisticRegressionModel Train Score is : ' , LogisticRegressionModel.score(X_train, y_train))
print('LogisticRegressionModel Test Score is : ' , LogisticRegressionModel.score(X_test, y_test))

#Import Libraries
from sklearn.ensemble import RandomForestClassifier

RandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=100,max_depth=2,random_state=33) #criterion can be also : entropy
RandomForestClassifierModel.fit(X_train, y_train)

#Calculating Details
print('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))
print('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))